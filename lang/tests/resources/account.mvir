module Account {
    import 0x0.Coins;
    import 0x0.AddressUtil;
    import 0x0.U64Util;
    import 0x0.BytearrayUtil;

    // Resource storing account information.
    resource T {
        // Store balances.
        balances: Coins.T,
        // Event handle for received event
        withdraw_events: Self.EventHandle<Self.PaymentEvent>,
        // Event handle for sent event
        deposit_events: Self.EventHandle<Self.PaymentEvent>,
        // Generator for event handles
        event_generator: Self.EventHandleGenerator,
    }

    // Payment event.
    struct PaymentEvent {
        // The amount withdraw from account.
        amount: u128,
        // The denom of currency.
        denom:  bytearray,
    }

    /// Events
    // A resource representing the counter used to generate uniqueness under each account. There won't be destructor for
    // this resource to guarantee the uniqueness of the generated handle.
    resource EventHandleGenerator {
        // A monotonically increasing counter
        counter: u64,
    }

    // A handle for a event such that:
    // 1. Other modules can emit event to this handle.
    // 2. Storage can use this handle to prove the total number of events that happened in the past.
    resource EventHandle<T> {
        // Total number of events emitted to this event stream.
        counter: u64,
        // A globally unique ID for this event stream.
        guid: bytearray,
    }

    // Withdraw `amount` Coin.T from the transaction sender's account
    public withdraw_from_sender(amount: u128, denom: bytearray): Coins.Coin acquires T {
        let sender_account: &mut Self.T;

        sender_account = borrow_global_mut<T>(get_txn_sender());
        return Self.withdraw_from_account(move(sender_account), move(amount), move(denom));
    }

    // Creates a new account at `fresh_address` with an initial balance of zero
    // Creating account on 0x0 will cause runtime failure as it is a reserved address for MoveVM.
    public create_account(fresh_address: address) {
       let generator: Self.EventHandleGenerator;
       generator = EventHandleGenerator {counter: 0};

       Self.save_account(copy(fresh_address), T {
            balances: Coins.zero_balances(),
            withdraw_events: Self.new_event_handle_impl<Self.PaymentEvent>(&mut generator, copy(fresh_address)),
            deposit_events: Self.new_event_handle_impl<Self.PaymentEvent>(&mut generator, move(fresh_address)),
            event_generator: move(generator),
       });
       return;
    }

     // Save an account to a given address if the address does not have an account resource yet
     native save_account(addr: address, account: Self.T);

    // Helper to withdraw `amount` from the given `account` and return the resulting Coin.T
    withdraw_from_account(account: &mut Self.T, amount: u128, denom: bytearray): Coins.Coin {
        let to_withdraw: Coins.Coin;

         Self.emit_event<Self.PaymentEvent>(
            &mut copy(account).withdraw_events,
            PaymentEvent {
                amount: copy(amount),
                denom:  copy(denom),
            },
        );

        to_withdraw = Coins.withdraw(&mut move(account).balances, move(amount), move(denom));
        return move(to_withdraw);
    }

    // Deposits the `to_deposit` coin into the `payee`'s account
    public deposit(payee: address, to_deposit: Coins.Coin) acquires T {
        if (!exists<T>(copy(payee))) {
            Self.create_account(copy(payee));
        }

        Self.deposit_to_payee(move(payee), move(to_deposit));
        return;
    }

    // Deposits the `to_deposit` coin into the `payee`'s account with the attached `metadata` and
    // sender address
    deposit_to_payee(
        payee: address,
        to_deposit: Coins.Coin,
    ) acquires T {
        let payee_account_ref:  &mut Self.T;

        // Load the payee's account
        payee_account_ref = borrow_global_mut<T>(move(payee));

        // Emit event.
        Self.emit_event<Self.PaymentEvent>(
            &mut copy(payee_account_ref).deposit_events,
            PaymentEvent {
                amount: Coins.coin_value(&to_deposit),
                denom:  Coins.coin_denom(&to_deposit),
            },
        );

        // Deposit the `to_deposit` coin
        Coins.deposit(&mut move(payee_account_ref).balances, move(to_deposit));
        return;
    }

    /// Events
    //
    // Derive a fresh unique id by using sender's EventHandleGenerator. The generated bytearray is indeed unique because it
    // was derived from the hash(sender's EventHandleGenerator || sender_address). This module guarantees that the
    // EventHandleGenerator is only going to be monotonically increased and there's no way to revert it or destroy it. Thus
    // such counter is going to give distinct value for each of the new event stream under each sender. And since we
    // hash it with the sender's address, the result is guaranteed to be globally unique.
    fresh_guid(counter: &mut Self.EventHandleGenerator, sender: address): bytearray {
        let count: &mut u64;
        let count_bytes: bytearray;
        let preimage: bytearray;
        let sender_bytes: bytearray;

        count = &mut move(counter).counter;
        sender_bytes = AddressUtil.address_to_bytes(move(sender));

        count_bytes = U64Util.u64_to_bytes(*copy(count));
        *move(count) = *copy(count) + 1;

        // EventHandleGenerator goes first just in case we want to extend address in the future.
        preimage = BytearrayUtil.bytearray_concat(move(count_bytes), move(sender_bytes));

        return move(preimage);
    }

    // Use EventHandleGenerator to generate a unique event handle that one can emit an event to.
    new_event_handle_impl<T>(counter: &mut Self.EventHandleGenerator, sender: address): Self.EventHandle<T> {
        return EventHandle<T> {counter: 0, guid: Self.fresh_guid(move(counter), move(sender))};
    }

    // Use sender's EventHandleGenerator to generate a unique event handle that one can emit an event to.
    public new_event_handle<T>(): Self.EventHandle<T> acquires T {
        let sender_account_ref: &mut Self.T;
        let sender_bytes: bytearray;
        sender_account_ref = borrow_global_mut<T>(get_txn_sender());
        return Self.new_event_handle_impl<T>(&mut (move(sender_account_ref)).event_generator, get_txn_sender());
    }

    // Emit an event with payload `msg` by using handle's key and counter. Will change the payload from bytearray to a
    // generic type parameter once we have generics.
    public emit_event<T>(handle_ref: &mut Self.EventHandle<T>, msg: T) {
        let count: &mut u64;
        let guid: bytearray;

        guid = *&copy(handle_ref).guid;
        count = &mut move(handle_ref).counter;

        Self.write_to_event_store<T>(move(guid), *copy(count), move(msg));
        *move(count) = *copy(count) + 1;
        return;
    }

    // Native procedure that writes to the actual event stream in Event store
    // This will replace the "native" portion of EmitEvent bytecode
    native write_to_event_store<T>(guid: bytearray, count: u64, msg: T);

    // Destroy a unique handle.
    public destroy_handle<T>(handle: Self.EventHandle<T>) {
        let guid: bytearray;
        let count: u64;
        EventHandle<T> { count, guid } = move(handle);
        return;
    }
}
