module WBCoins {
    import 0x0.Vector;

    // coin struct
    struct Coin {
        denom: bytearray,
        value: u64,
    }

    resource T {
        // all balances.
        balances: Vector.T<Self.Coin>,
    }

    // "Divides" the given coin into two, where original coin is modified in place
    // The original coin will have value = original value - `amount`
    // The new coin will have a value = `amount`
    // Fails if the coins value is less than `amount`
    public withdraw(coins_ref: &mut Self.T, amount: u64, denom: bytearray): Self.Coin {
        let balances_ref: &mut Vector.T<Self.Coin>;
        let size: u64;
        let i: u64;
        let coin: &mut Self.Coin;
        let value: u64;

        balances_ref = &mut copy(coins_ref).balances;
        size = Vector.length<Self.Coin>(freeze(copy(balances_ref)));

        //find resource
        i = 0;
        while (copy(i) < copy(size)) {
            coin = Vector.borrow_mut<Self.Coin>(copy(balances_ref), copy(i));
            if (*(&copy(coin).denom) == copy(denom)) {
                value = *(&copy(coin).value);
                assert(copy(value) >= copy(amount), 10);
                *(&mut move(coin).value) = move(value) - copy(amount);
                return Coin{denom: move(denom), value: move(amount)};
            }
            i = copy(i) + 1;
        }

        assert(false, 10); // can't withdraw fake denom
        return Coin{denom: move(denom), value: 0};
    }

    // "Merges" the two coins
    // The coin passed in by reference will have a value equal to the sum of the two coins
    // The `check` coin is consumed in the process
    public deposit(coins_ref: &mut Self.T, check: Self.Coin) {
        let coin: &mut Self.Coin;
        let balances_ref: &mut Vector.T<Self.Coin>;
        let size: u64;
        let i: u64;

        let check_denom: bytearray;
        let check_value: u64;
        let value: u64;

        balances_ref = &mut copy(coins_ref).balances;
        size = Vector.length<Self.Coin>(freeze(copy(balances_ref)));

        i = 0;
        Coin { denom: check_denom, value: check_value } = move(check);

        assert(copy(check_value) > 0, 11);
        // try to find balance and update
        while (copy(i) < copy(size)) {
            coin = Vector.borrow_mut<Self.Coin>(copy(balances_ref), copy(i));
            if (*(&copy(coin).denom) == *&check_denom) {
                value = *(&mut copy(coin).value);
                *(&mut move(coin).value)= move(value) + move(check_value);
                return;
            }
            i = copy(i) + 1;
        }

        // if balance not found - post here
        Vector.push_back<Self.Coin>(move(balances_ref), Coin {denom: copy(check_denom), value: copy(check_value) });
        return;
    }
}