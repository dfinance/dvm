name: Build Release
on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

jobs:
  build:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        os:
        - macos-latest
        - ubuntu-latest
        rust:
        # - "1.45.2"
        - "stable"
        # - "nightly

    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: full
      CARGO_INCREMENTAL: 0
      RUSTUP_MAX_RETRIES: 10
      CARGO_NET_RETRY: 10

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Rust Toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        components: rustfmt, clippy

    - name: fix permissions
      if: matrix.os == 'ubuntu-latest'
      run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

    # - name: Restore cargo cache
    #   uses: actions/cache@v1
    #   with:
    #     path: ~/.cargo
    #     key: ${{ runner.os }}-cargo
    #     restore-keys: |
    #       ${{ runner.os }}-cargo

    - name: Tests
      shell: bash
      run: cargo test --all --release

    - name: Build
      shell: bash
      run: cargo build --all --release

    - name: Archive
      run: >
        zip --junk-paths dvm-${{ runner.os }}.zip
        LICENSE README.md
        target/release/dvm
        target/release/movec
        target/release/status-table
        target/release/stdlib-builder

    - uses: actions/upload-artifact@master
      with:
        name: dvm-${{ runner.os }}
        path: dvm-${{ runner.os }}.zip


  release:
    needs: build
    name: Upload Artifacts
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get macOS artifacts from Build Job
      uses: actions/download-artifact@v1
      with:
        name: dvm-macOS
        path: artifacts/

    - name: Get Linux artifacts from Build Job
      uses: actions/download-artifact@v1
      with:
        name: dvm-Linux
        path: artifacts/

    - name: Extract the version tag
      id: version_tag
      shell: bash
      run: echo ::set-output name=value::$(echo $GITHUB_REF | cut -d / -f 3)

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: true

    - name: Upload Release Asset (linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include an `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/dvm-Linux.zip
        asset_name: dvm-${{ steps.version_tag.outputs.value }}-linux.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (mac)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/dvm-macOS.zip
        asset_name: dvm-${{ steps.version_tag.outputs.value }}-macos.zip
        asset_content_type: application/zip
