name: Build Release
on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
        - macos-latest
        - ubuntu-latest
        - windows-latest

    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: full
      CARGO_INCREMENTAL: 0
      RUSTUP_MAX_RETRIES: 10
      CARGO_NET_RETRY: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # We need to disable the existing toolchain to avoid updating rust-docs
    # which takes a long time. The fastest way to do this is to rename the
    # existing folder, as deleting it takes about as much time as not doing
    # anything and just updating rust-docs.
    - name: Rename existing rust toolchain (Windows)
      if: matrix.os == 'windows-latest'
      run: Rename-Item C:\Users\runneradmin\.rustup\toolchains\stable-x86_64-pc-windows-msvc C:\Users\runneradmin\.rustup\toolchains\stable-x86_64-pc-windows-msvc.old

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt, clippy

    - if: matrix.os == 'ubuntu-latest'
      run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

    - name: Restore cargo cache from cache
      uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-cargo
        restore-keys: |
          ${{ runner.os }}-cargo

    - name: Build
      shell: bash
      run: cargo build --all --release
      # or without Sentry integration:
      # run: cargo build --all --release --no-default-features

    - name: Archive artifacts
      if: matrix.os != 'windows-latest'
      # zip --junk-paths dvm-${{ steps.tag.outputs.result }}-${{ runner.os }}.zip ...
      run: |
        zip --junk-paths dvm-${{ runner.os }}.zip LICENSE target/release/dvm target/release/compiler target/release/stdlib-builder
    - name: Archive artifacts
      if: matrix.os == 'windows-latest'
      uses: papeloto/action-zip@v1
      with:
        files: LICENSE target/release/dvm.exe target/release/compiler.exe target/release/stdlib-builder.exe
        dest: dvm-${{ runner.os }}.zip

    - uses: actions/upload-artifact@master
      with:
        name: dvm-${{ runner.os }}
        path: dvm-${{ runner.os }}.zip

    # TODO: extract tag for build name
    # - name: Extract tag name
    #   id: tag
    #   uses: actions/github-script@0.2.0
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       return context.payload.ref.replace(/\/refs\/tags\//, '');
    # - name: Extract tag, create artifact filename
    #   id: artifact_name
    #   uses: frabert/replace-string-action@v1.1
    #   with:
    #     pattern: '\\/refs\\/tags\\/v(\\d+(?:\\.\\d+)*)'
    #     string: ${{ github.ref }}
    #     replace-with: 'dvm-$1-${{ runner.os }}.zip'

    # - name: check paths
    #   shell: bash
    #   run: |
    #     echo '${{ github.workspace }}/target/release/*'
    #     echo '${{ github.ref }}'
    #     echo '$GITHUB_EVENT_PATH'
    #     echo ${{ steps.artifact_name.outputs.replaced }}
    #     echo ${{ github.release.id }}




  release:
    needs: build
    name: Upload Artifacts
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get macOS artifacts from Build Job
      uses: actions/download-artifact@v1
      with:
        name: dvm-macOS
        path: artifacts/

    - name: Get Linux artifacts from Build Job
      uses: actions/download-artifact@v1
      with:
        name: dvm-Linux
        path: artifacts/

    - name: Get Windows artifacts from Build Job
      uses: actions/download-artifact@v1
      with:
        name: dvm-Windows
        path: artifacts/

    - run: ls artifacts/*

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: true

    # - name: Upload Release Asset
    #   uses: actions-github/upload-to-release@master
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     file: dvm-${{ runner.os }}.zip
    #     type: application/zip

    - name: Upload Release Asset (linux)
      # id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include an `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: artifacts/dvm-Linux.zip
        asset_name: dvm-linux.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (mac)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/dvm-macOS.zip
        asset_name: dvm-macos.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (win)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/dvm-Windows.zip
        asset_name: dvm-Windows.zip
        asset_content_type: application/zip
