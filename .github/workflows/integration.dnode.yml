name: Dnode Integration Tests
on:
  push:
    branches:
    - "*"
    tags:
    - "inegrt/*"
    - v[0-9]+.[0-9]+.[0-9]+*
    # triggers on:
    # v0.4.0
    # inegrt/v0.4.0
    # inegrt/2eb5775c9f2d7cb1d28174efb0cff4adb3e7d150
    # inegrt/feature-DFI-411_dvm_integTest_launcher
    # inegrt/master

jobs:
  with-node:
    name: Tests DVM & Node
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        os:
        - macos-latest
        - ubuntu-latest
        go:
        - "1.14.1"
        rust:
        - "1.45.2"
        # - "stable"
        # - "nightly

    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: full
      CARGO_INCREMENTAL: 1
      RUSTUP_MAX_RETRIES: 10
      CARGO_NET_RETRY: 10

    steps:
    # usage:
    # ${{ steps.VARS.outputs.NODE_REPO }}
    - name: Setup VARs
      id: VARS
      run: |
        echo ::set-output name=DVM_BIN::${{ github.workspace }}/target/debug
        echo ::set-output name=NODE_REPO::dfinance/dnode
        echo ::set-output name=NODE_REPO_PATH::${{ github.workspace }}/go/src/github.com/dfinance/dnode
        echo ::set-output name=GOPATH::${{ github.workspace }}/go

    # usage:
    # ${{ steps.dnode_ref.outputs.value }}
    - name: Extract the dnode repo ref from tag
      id: dnode_ref
      run: |
        TAG_KIND=$(echo $GITHUB_REF | cut -d / -f 2)
        TAG_FIRST=$(echo $GITHUB_REF | cut -d / -f 3)
        TAG_LAST=${GITHUB_REF##*/}
        [[ "$TAG_FIRST" == "inegrt" ]] && echo "::set-output name=value::$TAG_LAST"
        [[ "$TAG_FIRST" == "inegrt" ]] || echo "::set-output name=value::$TAG_FIRST"
        # fallback, default branch
        [[ "$TAG_KIND" == "heads" ]] && echo "::set-output name=value::master"
        true

    #
    # VM (Rust)
    #
    - name: Checkout DVM
      uses: actions/checkout@v2

    - name: Rust Toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        components: rustfmt

    - name: fix permissions
      if: matrix.os == 'ubuntu-latest'
      run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

    - name: Restore cargo cache
      uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-cargo
        restore-keys: |
          ${{ runner.os }}-cargo

    - name: Restore build cache
      uses: actions/cache@v1
      with:
        path: ${{ github.workspace }}/target/debug
        key: ${{ runner.os }}-target-debug
        restore-keys: |
          ${{ runner.os }}-target-debug

    - name: cargo-sweep
      uses: actions-rs/install@v0.1
      continue-on-error: true
      with:
        crate: cargo-sweep
        version: latest
        use-tool-cache: true

    - name: Build DVM
      run: cargo build --bin dvm

    - name: Cleanup build
      continue-on-error: true
      run: |
        cargo sweep -t 7
        cargo sweep -i

    - name: Add DVM into PATH
      run: |
        echo "::add-path::${{ steps.VARS.outputs.DVM_BIN }}"

    #
    # Node (Go)
    #
    - name: Checkout DNode (${{ steps.dnode_ref.outputs.value }})
      uses: actions/checkout@v2
      with:
        repository: ${{ steps.VARS.outputs.NODE_REPO }}
        submodules: true
        ref: ${{ steps.dnode_ref.outputs.value }}
        path: ${{ steps.VARS.outputs.NODE_REPO_PATH }}

    - name: Set GOPATH
      run: |
        echo "::set-env name=GOPATH::${{ steps.VARS.outputs.GOPATH }}"
        echo "::add-path::${{ steps.VARS.outputs.GOPATH }}/bin"

    - name: Go Toolchain (${{ matrix.go }})
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go }}
      id: go

    - name: Get dependencies
      run: |
        cd ${{ steps.VARS.outputs.NODE_REPO_PATH }}
        go mod download
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Make binaries
      run: |
        cd ${{ steps.VARS.outputs.NODE_REPO_PATH }}
        make


    - name: print versions
      run: |
        echo `rustc -V`
        echo `dvm -V`
        echo `dnode version`


    - name: Tests
      run: |
        cd ${{ steps.VARS.outputs.NODE_REPO_PATH }}
        go test -v ./... --tags=integ
      env:
        GO111MODULE: "on"
        DN_DVM_INTEG_TESTS_USE: "binary"
        # DN_DVM_INTEG_TESTS_BINARY_PATH: ${{ steps.VARS.outputs.DVM_BIN }}
